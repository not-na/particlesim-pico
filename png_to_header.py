#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import os
from typing import Tuple, List

import png

VERSION_STR = "0.1.0"

DEFAULT_SIZE = 32


HELP_TEXT = f"""
png_to_header.py v{VERSION_STR}

Usage:

./png_to_header.py --help
    Print this help page

./png_to_header.py [--gamma] --directory <dir>
    Convert all PNG files in a directory

./png_to_header.py [--gamma] <ifile> [ofile] [size] [name]
    Convert a PNG to a C header file

ifile: Input file name
ofile: Output file name, based on ifile if not given
size: Size of the image to convert, defaults to {DEFAULT_SIZE}
name: Name of the variable in the header, based on ifile if not given

The first argument must always be passed, later arguments are optional and can
be omitted.

If --gamma is passed, images will be gamma-corrected before conversion.
"""


HEADER_TEMPLATE = f"""#pragma once

#include "pico/stdlib.h"

// WARNING: This file has been autogenerated, do not edit directly!
// Generated by png_to_header.py {VERSION_STR}

#define {{name}}_PARTICLE_COUNT {{particlecount}}

const uint32_t {{name}}[] = {{{{
{{data}}
}}}};

// Stored as x1, y1, color1, x2, y2, color2, ...
// Could be a 2D Array, but the type of the list of different particle sets caused issues
const uint32_t {{name}}_PARTICLES[{{name}}_PARTICLE_COUNT*3] = {{{{
{{particles}}}}}};
"""

DATA_LINE_PREFIX = b"    "

PARTICLE_ENTRY = "    {x}, {y}, 0x{color:08x},\n"


GAMMA = 2.4


def gamma(s: float) -> float:
    # Based on https://stackoverflow.com/a/61138576
    # TODO: find right values for LED matrix panels
    if s <= 0.04045:
        return s / 12.92
    else:
        return ((s+0.055)/1.055)**2.4


def gamma8b(s: int) -> int:
    return int(255*gamma(s/255))


def convert_png(filename: str, size: int, gamma_correct: bool) -> Tuple[str, List[Tuple[int, int, int]]]:
    r = png.Reader(filename=filename)
    w, h, row, info = r.asRGBA8()

    if w != size or h != size:
        print(f"Expected PNG of size {size}x{size}, but got {w}x{h} instead!")
        raise ValueError("Invalid size")

    dat = bytearray(DATA_LINE_PREFIX)

    particles = []

    x = 0
    y = 0
    for ro in row:
        # Iterate four at a time, based on https://stackoverflow.com/a/3415150
        ir = iter(ro)
        for c in zip(ir, ir, ir, ir):
            r, g, b, a = c

            if gamma_correct:
                r = gamma8b(r)
                g = gamma8b(g)
                b = gamma8b(b)

            cn = r << 0 | g << 8 | b << 16

            if a != 0xFF:
                # Particle
                particles.append((x, y, cn))
                cn = 0  # Remove from static background

            dat.extend(bytearray(f"0x{cn:08X}, ", encoding="ascii"))

            x += 1

        dat.extend(b"\n")
        dat.extend(DATA_LINE_PREFIX)

        y += 1
        x = 0

    return str(dat.decode()), particles


def convert_file(ifile: str, ofile: str, size: int, gamma_correct: bool, name=None) -> None:
    ifile = os.path.abspath(ifile)
    ofile = os.path.abspath(ofile)

    if name is None:
        name = ".".join(os.path.basename(ifile).split(".")[0:-1])
        name = name.replace(".", "_").replace("-", "_").replace(" ", "_").upper()

    data, particles = convert_png(ifile, size, gamma_correct)

    out = HEADER_TEMPLATE.format(
        name=name,
        data=data,
        particlecount=len(particles),
        particles="".join([PARTICLE_ENTRY.format(x=x, y=y, color=color) for x, y, color in particles])
    )

    with open(ofile, "w") as f:
        f.write(out)


if __name__ == "__main__":
    if "--gamma" in sys.argv:
        sys.argv.remove("--gamma")
        gamma_correct = True
    else:
        gamma_correct = False

    if "--help" in sys.argv:
        print(HELP_TEXT)
    elif "--directory" in sys.argv:
        if len(sys.argv) != 3:
            print("Expected exactly one additional argument when using --directory!")
        else:
            files = os.listdir(sys.argv[2])
            for fname in files:
                if fname.endswith(".png"):
                    print(f"Converting {fname}")
                    fname = os.path.join(sys.argv[2], fname)
                    convert_file(fname, fname.replace(".png", ".h"), DEFAULT_SIZE, gamma_correct)
    elif len(sys.argv) == 2:
        convert_file(sys.argv[1], sys.argv[1].replace(".png", ".h"), DEFAULT_SIZE, gamma_correct)
    elif len(sys.argv) == 3:
        convert_file(sys.argv[1], sys.argv[2], DEFAULT_SIZE, gamma_correct)
    elif len(sys.argv) == 4:
        convert_file(sys.argv[1], sys.argv[2], int(sys.argv[3]), gamma_correct)
    elif len(sys.argv) == 5:
        convert_file(sys.argv[1], sys.argv[2], int(sys.argv[3]), gamma_correct, sys.argv[4])
    else:
        print(f"Expected between 1 and 4 arguments, got {len(sys.argv)-1}!")
        print("Use the '--help' option to see a usage reference.")
